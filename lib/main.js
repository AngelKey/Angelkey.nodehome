// Generated by IcedCoffeeScript 1.7.1-c
(function() {
  var Base, Darwin, Linux, Posix, Win32, lst, pathmod, sym, uc1, _eng, _i, _len, _ref,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  pathmod = require('path');

  Base = (function() {
    function Base() {}

    Base.prototype.unsplit = function(v) {
      if (v.length && v[0].length === 0) {
        v = v.slice(0);
        v[0] = pathmod.sep;
      }
      return pathmod.join.apply(pathmod, v);
    };

    Base.prototype.join = function() {
      var v;
      v = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return pathmod.join.apply(pathmod, v);
    };

    Base.prototype.cache_dir = function(name) {
      if (name == null) {
        name = null;
      }
      return this.config_dir(name);
    };

    Base.prototype.data_dir = function(name) {
      if (name == null) {
        name = null;
      }
      return this.config_dir(name);
    };

    return Base;

  })();

  Posix = (function(_super) {
    __extends(Posix, _super);

    function Posix() {
      this.sep = pathmod.sep;
    }

    Posix.prototype.split = function(x) {
      return x.split(this.sep);
    };

    Posix.prototype.home = function(opts) {
      var ret;
      if (opts == null) {
        opts = {};
      }
      ret = process.env.HOME;
      if (opts.array) {
        return this.split(ret);
      } else {
        return ret;
      }
    };

    Posix.prototype.normalize = function(p) {
      return p;
    };

    Posix.prototype.config_dir = function(name) {
      var dirs;
      if (name == null) {
        name = null;
      }
      dirs = this.home();
      if (name != null) {
        dirs.push("." + name);
      }
      return this.join.apply(this, dirs);
    };

    return Posix;

  })(Base);

  Linux = (function(_super) {
    __extends(Linux, _super);

    function Linux() {
      return Linux.__super__.constructor.apply(this, arguments);
    }

    Linux.prototype.config_dir = function(name) {
      var prfx;
      if (name == null) {
        name = null;
      }
      prfx = process.env.XDG_CONFIG_HOME || this.join(this.home(), ".config");
      if (name != null) {
        return this.join(prfx, name);
      } else {
        return prfx;
      }
    };

    Linux.prototype.cache_dir = function(name) {
      var prfx;
      if (name == null) {
        name = null;
      }
      prfx = process.env.XDG_CACHE_HOME || this.join(this.home(), ".cache");
      if (name != null) {
        return this.join(prfx, name);
      } else {
        return prfx;
      }
    };

    Linux.prototype.data_dir = function(name) {
      var prfx;
      if (name == null) {
        name = null;
      }
      prfx = process.env.XDG_DATA_HOME || this.join(this.home(), ".local", "share");
      if (name != null) {
        return this.join(prfx, name);
      } else {
        return prfx;
      }
    };

    return Linux;

  })(Posix);

  uc1 = function(p) {
    return p[0].toUpperCase() + p.slice(1);
  };

  Darwin = (function(_super) {
    __extends(Darwin, _super);

    function Darwin() {
      return Darwin.__super__.constructor.apply(this, arguments);
    }

    Darwin.prototype.config_dir = function(name) {
      var path;
      if (name == null) {
        name = null;
      }
      path = [this.home(), "Library", "Application Support"];
      if (name != null) {
        path.push(uc1(name));
      }
      return this.join.apply(this, path);
    };

    return Darwin;

  })(Posix);

  lst = function(v) {
    return v.slice(-1)[0];
  };

  Win32 = (function(_super) {
    __extends(Win32, _super);

    function Win32() {
      return Win32.__super__.constructor.apply(this, arguments);
    }

    Win32.prototype.split = function(x) {
      return x.split(/[/\\]/);
    };

    Win32.prototype.normalize = function(p) {
      return this.join(this.unsplit(p));
    };

    Win32.prototype.config_dir = function(name) {
      var home;
      if (name == null) {
        name = null;
      }
      home = this.home();
      if (name != null) {
        return this.join(home, name);
      } else {
        return home;
      }
    };

    Win32.prototype.home = function(opts) {
      var e, err, p, ret;
      if (opts == null) {
        opts = {};
      }
      ret = null;
      err = (e = process.env.TEMP) == null ? new Error("No env.TEMP variable found") : (p = this.split(e)).length === 0 ? new Error("Malformed env.TEMP variable") : !(p.pop().match(/^te?mp$/i)) ? new Error("TEMP didn't end in \\Temp") : (lst(p).toLowerCase() === "local" && !opts.local ? (p.pop(), p.push("Roaming")) : void 0, ret = opts.array ? p : this.unsplit(p), null);
      if (err != null) {
        throw err;
      }
      return ret;
    };

    return Win32;

  })(Base);

  _eng = (function() {
    switch (process.platform) {
      case 'win32':
        return new Win32();
      case 'linux':
        return new Linux();
      case 'darwin':
        return new Darwin();
      default:
        return new Posix();
    }
  })();

  _ref = ['split', 'unsplit', 'home', 'normalize', 'join', 'config_dir', 'data_dir', 'cache_dir'];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    sym = _ref[_i];
    exports[sym] = _eng[sym].bind(_eng);
  }

}).call(this);
